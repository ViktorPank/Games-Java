package com.javarush.games.minesweeper;
import com.javarush.engine.cell.*;

import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;

public class MinesweeperGame extends Game{

    private static final int SIDE = 9;
    private GameObject [][] gameField = new GameObject[SIDE][SIDE];
    private int countMinesOnField = 0;

    private static final String MINE = "\uD83D\uDCA3";


    @Override
    public void initialize(){
        setScreenSize(SIDE,SIDE);
        createGame();

    }

    private void createGame(){
        for (int i = 0; i < SIDE ; i++) {//создание обьектов ячеек с минами
            for (int j = 0; j < SIDE; j++) {
                if (getRandomNumber(10) == 2) {

                    gameField[j][i] = new GameObject(j, i,true );
                    setCellColor(j, i, Color.RED);
                    countMinesOnField++;
                }
                else{
                    gameField[j][i] = new GameObject(j, i,false);
                    setCellColor(j, i, Color.WHITE);
                }

            }
        }
        countMineNeighbors();
        /*
       for (int i = 0; i < SIDE; i++) {
            for (int j = 0; j < SIDE; j++) {
               /* System.out.print("X" + gameField[j][i].x + "+Y" + gameField[j][i].y + "=");
                for (int k = 0; k < getNeighbors(gameField[j][i]).size(); k++) {
                    GameObject buf = getNeighbors(gameField[j][i]).get(k);
                    System.out.print("x" + buf.x + "+y" + buf.y + " ");
                }
                System.out.println();
                String buffer = String.valueOf(gameField[j][i].countMineNeighbors);
                setCellValue(j,i,buffer);
            }
        }

        */
    }

    private List<GameObject> getNeighbors(GameObject object){


        int x = gameObject.y;
        int y = gameObject.x;

        List<GameObject> listNeighbors = new ArrayList<>();//создание листа соседей
		
------------------------------------------------------------------------1вариант
		
		if (x == 0 && y == 0) {
            neighbors.add(gameField[x][y + 1]);//левый угол верх
            neighbors.add(gameField[x + 1][y]);
            neighbors.add(gameField[x + 1][y + 1]);
        } else if (x == 0 && y == SIDE - 1) {//левый угол низ
            neighbors.add(gameField[x][y - 1]);
            neighbors.add(gameField[x + 1][y - 1]);
            neighbors.add(gameField[x + 1][y]);

        } else if (x == SIDE - 1 && y == 0) {//правый угол вверх
            neighbors.add(gameField[x - 1][y]);
            neighbors.add(gameField[x - 1][y + 1]);
            neighbors.add(gameField[x][y + 1]);

        } else if (x == SIDE - 1 && y == SIDE - 1) {//правый угол низ
            neighbors.add(gameField[x][y - 1]);
            neighbors.add(gameField[x - 1][y - 1]);
            neighbors.add(gameField[x - 1][y]);
        } else if (x == 0 && y > 0 && y < SIDE - 1) {//левая полоса вертикальная край
            neighbors.add(gameField[x][y - 1]);
            neighbors.add(gameField[x][y + 1]);
            neighbors.add(gameField[x + 1][y - 1]);
            neighbors.add(gameField[x + 1][y]);
            neighbors.add(gameField[x + 1][y + 1]);
        } else if (y == 0 && x > 0 && x < SIDE - 1) {//верхняя полоса край
            neighbors.add(gameField[x - 1][y]);
            neighbors.add(gameField[x + 1][y]);
            neighbors.add(gameField[x - 1][y + 1]);
            neighbors.add(gameField[x][y + 1]);
            neighbors.add(gameField[x + 1][y + 1]);
        } else if (x == SIDE - 1 && y > 0 && y < SIDE - 1) {//правая полоса вертикальная край
            neighbors.add(gameField[x][y - 1]);
            neighbors.add(gameField[x][y + 1]);
            neighbors.add(gameField[x - 1][y - 1]);
            neighbors.add(gameField[x - 1][y]);
            neighbors.add(gameField[x - 1][y + 1]);
        } else if (y == SIDE - 1 && x > 0 && x < SIDE - 1) {//нижняя полоса край
            neighbors.add(gameField[x - 1][y]);
            neighbors.add(gameField[x - 1][y - 1]);
            neighbors.add(gameField[x][y - 1]);
            neighbors.add(gameField[x + 1][y - 1]);
            neighbors.add(gameField[x + 1][y]);

        } else {
            neighbors.add(gameField[x - 1][y - 1]);
            neighbors.add(gameField[x - 1][y]);
            neighbors.add(gameField[x - 1][y + 1]);
            neighbors.add(gameField[x][y - 1]);
            neighbors.add(gameField[x][y + 1]);
            neighbors.add(gameField[x + 1][y - 1]);
            neighbors.add(gameField[x + 1][y]);
            neighbors.add(gameField[x + 1][y + 1]);
        }

--------------------------------------------------2 вариант
        int x = object.x;
        int y = object.y;
        List neighbors = new LinkedList<>();

        if((x - 1) >= 0 && (y - 1) >= 0) neighbors.add(gameField[y - 1][x - 1]);

        if((y - 1) >= 0) neighbors.add(gameField[y - 1][x]);

        if((y - 1) >= 0 && (x + 1) < SIDE) neighbors.add(gameField[y - 1][x + 1]);
        //------------------------------------------------

        if((x + 1) < SIDE) neighbors.add(gameField[y][x + 1]);
        if( (y + 1) < SIDE && (x + 1) < SIDE) neighbors.add(gameField[y + 1][x + 1]);

        if( (y + 1) < SIDE) neighbors.add(gameField[y + 1 ][x]);

        //------------------------------------------------

        if((x - 1) >= 0  && (y + 1) < SIDE) neighbors.add(gameField[y + 1][x - 1]);


        if((x - 1) >= 0 ) neighbors.add(gameField[y][x - 1]);

        return  neighbors;
        

    }

    private void countMineNeighbors(){

        List<GameObject> listNeighbors;
        for (int i = 0; i < SIDE ; i++) {//цикл для парсинга по столбцам
            for (int j = 0; j < SIDE; j++) {//цикл для парсинг по строкам
                if (!gameField [j][i].isMine){//проверка текущая ячейка не является миной
                    listNeighbors = getNeighbors(gameField[j][i]);//получение соседей текущей ячейки
                    for (GameObject buf :listNeighbors ) { // парсинг по соседям и....
                        if (buf.isMine)gameField[j][i].countMineNeighbors++;//...кто из из них является террористом подсчитываем

                    }

                    //gameField[j][i].countMineNeighbors = getNeighbors(gameField[j][i]).size(); //Сколько у текущей клетки соседей// террористов
                }

            }
        }

    }

}


